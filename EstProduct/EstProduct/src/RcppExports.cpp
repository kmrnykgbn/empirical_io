// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// moment_OP_2nd_rcpp
NumericVector moment_OP_2nd_rcpp(int T, int J, double alpha, double beta_0, double beta_k, Eigen::VectorXd y_error_tilde, Eigen::VectorXd phi_t_1, Eigen::MatrixXd matA);
RcppExport SEXP _EstProduct_moment_OP_2nd_rcpp(SEXP TSEXP, SEXP JSEXP, SEXP alphaSEXP, SEXP beta_0SEXP, SEXP beta_kSEXP, SEXP y_error_tildeSEXP, SEXP phi_t_1SEXP, SEXP matASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< double >::type beta_k(beta_kSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y_error_tilde(y_error_tildeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type phi_t_1(phi_t_1SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type matA(matASEXP);
    rcpp_result_gen = Rcpp::wrap(moment_OP_2nd_rcpp(T, J, alpha, beta_0, beta_k, y_error_tilde, phi_t_1, matA));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_hello_world
Eigen::MatrixXd rcppeigen_hello_world();
RcppExport SEXP _EstProduct_rcppeigen_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcppeigen_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_outerproduct
Eigen::MatrixXd rcppeigen_outerproduct(const Eigen::VectorXd& x);
RcppExport SEXP _EstProduct_rcppeigen_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_innerproduct
double rcppeigen_innerproduct(const Eigen::VectorXd& x);
RcppExport SEXP _EstProduct_rcppeigen_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_bothproducts
Rcpp::List rcppeigen_bothproducts(const Eigen::VectorXd& x);
RcppExport SEXP _EstProduct_rcppeigen_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_EstProduct_moment_OP_2nd_rcpp", (DL_FUNC) &_EstProduct_moment_OP_2nd_rcpp, 8},
    {"_EstProduct_rcppeigen_hello_world", (DL_FUNC) &_EstProduct_rcppeigen_hello_world, 0},
    {"_EstProduct_rcppeigen_outerproduct", (DL_FUNC) &_EstProduct_rcppeigen_outerproduct, 1},
    {"_EstProduct_rcppeigen_innerproduct", (DL_FUNC) &_EstProduct_rcppeigen_innerproduct, 1},
    {"_EstProduct_rcppeigen_bothproducts", (DL_FUNC) &_EstProduct_rcppeigen_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_EstProduct(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
